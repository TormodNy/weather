// This file is auto-generated by @hey-api/openapi-ts

export type Forecast = {
    meta: {
        units: ForecastUnits;
        /**
         * Update time for this forecast
         */
        updated_at: string;
    };
    timeseries: Array<ForecastTimeStep>;
};

/**
 * Summary of weather conditions.
 */
export type ForecastSummary = {
    symbol_code: WeatherSymbol;
};

/**
 * Weather parameters valid for a specific point in time.
 */
export type ForecastTimeInstant = {
    /**
     * Air pressure at sea level
     */
    air_pressure_at_sea_level?: number;
    /**
     * Air temperature
     */
    air_temperature?: number;
    /**
     * Amount of sky covered by clouds.
     */
    cloud_area_fraction?: number;
    /**
     * Amount of sky covered by clouds at high elevation.
     */
    cloud_area_fraction_high?: number;
    /**
     * Amount of sky covered by clouds at low elevation.
     */
    cloud_area_fraction_low?: number;
    /**
     * Amount of sky covered by clouds at medium elevation.
     */
    cloud_area_fraction_medium?: number;
    /**
     * Dew point temperature at sea level
     */
    dew_point_temperature?: number;
    /**
     * Amount of area covered by fog.
     */
    fog_area_fraction?: number;
    /**
     * Amount of humidity in the air.
     */
    relative_humidity?: number;
    /**
     * The direction wind is coming from, in degrees clockwise from North
     */
    wind_from_direction?: number;
    /**
     * Speed of wind
     */
    wind_speed?: number;
    /**
     * Speed of wind gust
     */
    wind_speed_of_gust?: number;
};

/**
 * Weather parameters valid for a specified time period.
 */
export type ForecastTimePeriod = {
    /**
     * Maximum air temperature in period
     */
    air_temperature_max?: number;
    /**
     * Minimum air temperature in period
     */
    air_temperature_min?: number;
    /**
     * Best estimate for amount of precipitation for this period
     */
    precipitation_amount?: number;
    /**
     * Maximum amount of precipitation for this period
     */
    precipitation_amount_max?: number;
    /**
     * Minimum amount of precipitation for this period
     */
    precipitation_amount_min?: number;
    /**
     * Probability of any precipitation coming for this period
     */
    probability_of_precipitation?: number;
    /**
     * Probability of any thunder coming for this period
     */
    probability_of_thunder?: number;
    /**
     * Maximum ultraviolet index if sky is clear
     */
    ultraviolet_index_clear_sky_max?: number;
};

export type ForecastTimeStep = {
    /**
     * Forecast for a specific time
     */
    data: {
        /**
         * Parameters which applies to this exact point in time
         */
        instant: {
            details?: ForecastTimeInstant;
        };
        /**
         * Parameters with validity times over twelve hours. Will not exist for all time steps.
         */
        next_12_hours?: {
            details: ForecastTimePeriod;
            summary: ForecastSummary;
        };
        /**
         * Parameters with validity times over one hour. Will not exist for all time steps.
         */
        next_1_hours?: {
            details: ForecastTimePeriod;
            summary: ForecastSummary;
        };
        /**
         * Parameters with validity times over six hours. Will not exist for all time steps.
         */
        next_6_hours?: {
            details: ForecastTimePeriod;
            summary: ForecastSummary;
        };
    };
    /**
     * The time these forecast values are valid for. Timestamp in format YYYY-MM-DDThh:mm:ssZ (ISO 8601)
     */
    time: string;
};

export type ForecastUnits = {
    air_pressure_at_sea_level?: string;
    air_temperature?: string;
    air_temperature_max?: string;
    air_temperature_min?: string;
    cloud_area_fraction?: string;
    cloud_area_fraction_high?: string;
    cloud_area_fraction_low?: string;
    cloud_area_fraction_medium?: string;
    dew_point_temperature?: string;
    fog_area_fraction?: string;
    precipitation_amount?: string;
    precipitation_amount_max?: string;
    precipitation_amount_min?: string;
    probability_of_precipitation?: string;
    probability_of_thunder?: string;
    relative_humidity?: string;
    ultraviolet_index_clear_sky_max?: string;
    wind_from_direction?: string;
    wind_speed?: string;
    wind_speed_of_gust?: string;
};

export type METJSONForecast = {
    geometry: PointGeometry;
    properties: Forecast;
    type: "Feature";
};

export type PointGeometry = {
    /**
     * [longitude, latitude, altitude]. All numbers in decimal.
     */
    coordinates: Array<number>;
    type: "Point";
};

/**
 * A identifier that sums up the weather condition for this time period, see documentation.
 */
export type WeatherSymbol =
    | "clearsky_day"
    | "clearsky_night"
    | "clearsky_polartwilight"
    | "fair_day"
    | "fair_night"
    | "fair_polartwilight"
    | "lightssnowshowersandthunder_day"
    | "lightssnowshowersandthunder_night"
    | "lightssnowshowersandthunder_polartwilight"
    | "lightsnowshowers_day"
    | "lightsnowshowers_night"
    | "lightsnowshowers_polartwilight"
    | "heavyrainandthunder"
    | "heavysnowandthunder"
    | "rainandthunder"
    | "heavysleetshowersandthunder_day"
    | "heavysleetshowersandthunder_night"
    | "heavysleetshowersandthunder_polartwilight"
    | "heavysnow"
    | "heavyrainshowers_day"
    | "heavyrainshowers_night"
    | "heavyrainshowers_polartwilight"
    | "lightsleet"
    | "heavyrain"
    | "lightrainshowers_day"
    | "lightrainshowers_night"
    | "lightrainshowers_polartwilight"
    | "heavysleetshowers_day"
    | "heavysleetshowers_night"
    | "heavysleetshowers_polartwilight"
    | "lightsleetshowers_day"
    | "lightsleetshowers_night"
    | "lightsleetshowers_polartwilight"
    | "snow"
    | "heavyrainshowersandthunder_day"
    | "heavyrainshowersandthunder_night"
    | "heavyrainshowersandthunder_polartwilight"
    | "snowshowers_day"
    | "snowshowers_night"
    | "snowshowers_polartwilight"
    | "fog"
    | "snowshowersandthunder_day"
    | "snowshowersandthunder_night"
    | "snowshowersandthunder_polartwilight"
    | "lightsnowandthunder"
    | "heavysleetandthunder"
    | "lightrain"
    | "rainshowersandthunder_day"
    | "rainshowersandthunder_night"
    | "rainshowersandthunder_polartwilight"
    | "rain"
    | "lightsnow"
    | "lightrainshowersandthunder_day"
    | "lightrainshowersandthunder_night"
    | "lightrainshowersandthunder_polartwilight"
    | "heavysleet"
    | "sleetandthunder"
    | "lightrainandthunder"
    | "sleet"
    | "lightssleetshowersandthunder_day"
    | "lightssleetshowersandthunder_night"
    | "lightssleetshowersandthunder_polartwilight"
    | "lightsleetandthunder"
    | "partlycloudy_day"
    | "partlycloudy_night"
    | "partlycloudy_polartwilight"
    | "sleetshowersandthunder_day"
    | "sleetshowersandthunder_night"
    | "sleetshowersandthunder_polartwilight"
    | "rainshowers_day"
    | "rainshowers_night"
    | "rainshowers_polartwilight"
    | "snowandthunder"
    | "sleetshowers_day"
    | "sleetshowers_night"
    | "sleetshowers_polartwilight"
    | "cloudy"
    | "heavysnowshowersandthunder_day"
    | "heavysnowshowersandthunder_night"
    | "heavysnowshowersandthunder_polartwilight"
    | "heavysnowshowers_day"
    | "heavysnowshowers_night"
    | "heavysnowshowers_polartwilight";

export type GetClassicData = {
    query: {
        /**
         * Whole meters above sea level
         */
        altitude?: number;
        /**
         * Latitude
         */
        lat: number;
        /**
         * Longitude
         */
        lon: number;
    };
};

export type GetClassicResponse = string | void;

export type GetClassicError = unknown;

export type GetClassicByFormatData = {
    path: {
        /**
         * format code (file extension)
         */
        format: "xml";
    };
    query: {
        /**
         * Whole meters above sea level
         */
        altitude?: number;
        /**
         * Latitude
         */
        lat: number;
        /**
         * Longitude
         */
        lon: number;
    };
};

export type GetClassicByFormatResponse = string | void;

export type GetClassicByFormatError = unknown;

export type GetCompactData = {
    query: {
        /**
         * Whole meters above sea level
         */
        altitude?: number;
        /**
         * Latitude
         */
        lat: number;
        /**
         * Longitude
         */
        lon: number;
    };
};

export type GetCompactResponse = METJSONForecast | void;

export type GetCompactError = unknown;

export type GetCompactByFormatData = {
    path: {
        /**
         * format code (file extension)
         */
        format: "json";
    };
    query: {
        /**
         * Whole meters above sea level
         */
        altitude?: number;
        /**
         * Latitude
         */
        lat: number;
        /**
         * Longitude
         */
        lon: number;
    };
};

export type GetCompactByFormatResponse = METJSONForecast | void;

export type GetCompactByFormatError = unknown;

export type GetCompleteData = {
    query: {
        /**
         * Whole meters above sea level
         */
        altitude?: number;
        /**
         * Latitude
         */
        lat: number;
        /**
         * Longitude
         */
        lon: number;
    };
};

export type GetCompleteResponse = METJSONForecast | void;

export type GetCompleteError = unknown;

export type GetCompleteByFormatData = {
    path: {
        /**
         * format code (file extension)
         */
        format: "json";
    };
    query: {
        /**
         * Whole meters above sea level
         */
        altitude?: number;
        /**
         * Latitude
         */
        lat: number;
        /**
         * Longitude
         */
        lon: number;
    };
};

export type GetCompleteByFormatResponse = METJSONForecast | void;

export type GetCompleteByFormatError = unknown;

export type GetMiniData = {
    query: {
        /**
         * Whole meters above sea level
         */
        altitude?: number;
        /**
         * Latitude
         */
        lat: number;
        /**
         * Longitude
         */
        lon: number;
    };
};

export type GetMiniResponse = METJSONForecast | void;

export type GetMiniError = unknown;

export type GetMiniByFormatData = {
    path: {
        /**
         * format code (file extension)
         */
        format: "json";
    };
    query: {
        /**
         * Whole meters above sea level
         */
        altitude?: number;
        /**
         * Latitude
         */
        lat: number;
        /**
         * Longitude
         */
        lon: number;
    };
};

export type GetMiniByFormatResponse = METJSONForecast | void;

export type GetMiniByFormatError = unknown;

export type GetStatusResponse = string | void;

export type GetStatusError = unknown;

export type GetStatusByFormatData = {
    path: {
        /**
         * format code (file extension)
         */
        format: "json";
    };
};

export type GetStatusByFormatResponse = string | void;

export type GetStatusByFormatError = unknown;

export type GetChangelogResponse = unknown;

export type GetChangelogError = unknown;

export type GetHealthzResponse = unknown;

export type GetHealthzError = unknown;

export type GetSchemaResponse = unknown;

export type GetSchemaError = unknown;
