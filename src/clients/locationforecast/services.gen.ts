// This file is auto-generated by @hey-api/openapi-ts

import {
    createClient,
    createConfig,
    type Options,
} from "@hey-api/client-fetch";
import type {
    GetClassicData,
    GetClassicError,
    GetClassicResponse,
    GetClassicByFormatData,
    GetClassicByFormatError,
    GetClassicByFormatResponse,
    GetCompactData,
    GetCompactError,
    GetCompactResponse,
    GetCompactByFormatData,
    GetCompactByFormatError,
    GetCompactByFormatResponse,
    GetCompleteData,
    GetCompleteError,
    GetCompleteResponse,
    GetCompleteByFormatData,
    GetCompleteByFormatError,
    GetCompleteByFormatResponse,
    GetMiniData,
    GetMiniError,
    GetMiniResponse,
    GetMiniByFormatData,
    GetMiniByFormatError,
    GetMiniByFormatResponse,
    GetStatusError,
    GetStatusResponse,
    GetStatusByFormatData,
    GetStatusByFormatError,
    GetStatusByFormatResponse,
    GetChangelogError,
    GetChangelogResponse,
    GetHealthzError,
    GetHealthzResponse,
    GetSchemaError,
    GetSchemaResponse,
} from "./types.gen";

export const client = createClient(createConfig());

export class DataService {
    /**
     * Weather forecast for a specified place
     */
    public static getClassic<ThrowOnError extends boolean = false>(
        options: Options<GetClassicData, ThrowOnError>,
    ) {
        return (options?.client ?? client).get<
            GetClassicResponse,
            GetClassicError,
            ThrowOnError
        >({
            ...options,
            url: "/classic",
        });
    }

    /**
     * Weather forecast for a specified place
     */
    public static getClassicByFormat<ThrowOnError extends boolean = false>(
        options: Options<GetClassicByFormatData, ThrowOnError>,
    ) {
        return (options?.client ?? client).get<
            GetClassicByFormatResponse,
            GetClassicByFormatError,
            ThrowOnError
        >({
            ...options,
            url: "/classic.{format}",
        });
    }

    /**
     * Weather forecast for a specified place
     */
    public static getCompact<ThrowOnError extends boolean = false>(
        options: Options<GetCompactData, ThrowOnError>,
    ) {
        return (options?.client ?? client).get<
            GetCompactResponse,
            GetCompactError,
            ThrowOnError
        >({
            ...options,
            url: "/compact",
        });
    }

    /**
     * Weather forecast for a specified place
     */
    public static getCompactByFormat<ThrowOnError extends boolean = false>(
        options: Options<GetCompactByFormatData, ThrowOnError>,
    ) {
        return (options?.client ?? client).get<
            GetCompactByFormatResponse,
            GetCompactByFormatError,
            ThrowOnError
        >({
            ...options,
            url: "/compact.{format}",
        });
    }

    /**
     * Weather forecast for a specified place
     */
    public static getComplete<ThrowOnError extends boolean = false>(
        options: Options<GetCompleteData, ThrowOnError>,
    ) {
        return (options?.client ?? client).get<
            GetCompleteResponse,
            GetCompleteError,
            ThrowOnError
        >({
            ...options,
            url: "/complete",
        });
    }

    /**
     * Weather forecast for a specified place
     */
    public static getCompleteByFormat<ThrowOnError extends boolean = false>(
        options: Options<GetCompleteByFormatData, ThrowOnError>,
    ) {
        return (options?.client ?? client).get<
            GetCompleteByFormatResponse,
            GetCompleteByFormatError,
            ThrowOnError
        >({
            ...options,
            url: "/complete.{format}",
        });
    }

    /**
     * Weather forecast for a specified place
     */
    public static getMini<ThrowOnError extends boolean = false>(
        options: Options<GetMiniData, ThrowOnError>,
    ) {
        return (options?.client ?? client).get<
            GetMiniResponse,
            GetMiniError,
            ThrowOnError
        >({
            ...options,
            url: "/mini",
        });
    }

    /**
     * Weather forecast for a specified place
     */
    public static getMiniByFormat<ThrowOnError extends boolean = false>(
        options: Options<GetMiniByFormatData, ThrowOnError>,
    ) {
        return (options?.client ?? client).get<
            GetMiniByFormatResponse,
            GetMiniByFormatError,
            ThrowOnError
        >({
            ...options,
            url: "/mini.{format}",
        });
    }

    /**
     * Weather forecast for a specified place
     */
    public static getStatus<ThrowOnError extends boolean = false>(
        options?: Options<unknown, ThrowOnError>,
    ) {
        return (options?.client ?? client).get<
            GetStatusResponse,
            GetStatusError,
            ThrowOnError
        >({
            ...options,
            url: "/status",
        });
    }

    /**
     * Weather forecast for a specified place
     */
    public static getStatusByFormat<ThrowOnError extends boolean = false>(
        options: Options<GetStatusByFormatData, ThrowOnError>,
    ) {
        return (options?.client ?? client).get<
            GetStatusByFormatResponse,
            GetStatusByFormatError,
            ThrowOnError
        >({
            ...options,
            url: "/status.{format}",
        });
    }
}

export class MetadataService {
    /**
     * RSS feed of changes to this product
     */
    public static getChangelog<ThrowOnError extends boolean = false>(
        options?: Options<unknown, ThrowOnError>,
    ) {
        return (options?.client ?? client).get<
            GetChangelogResponse,
            GetChangelogError,
            ThrowOnError
        >({
            ...options,
            url: "/changelog",
        });
    }

    /**
     * Check health status for product
     */
    public static getHealthz<ThrowOnError extends boolean = false>(
        options?: Options<unknown, ThrowOnError>,
    ) {
        return (options?.client ?? client).get<
            GetHealthzResponse,
            GetHealthzError,
            ThrowOnError
        >({
            ...options,
            url: "/healthz",
        });
    }

    /**
     * Schema for XML data
     */
    public static getSchema<ThrowOnError extends boolean = false>(
        options?: Options<unknown, ThrowOnError>,
    ) {
        return (options?.client ?? client).get<
            GetSchemaResponse,
            GetSchemaError,
            ThrowOnError
        >({
            ...options,
            url: "/schema",
        });
    }
}
