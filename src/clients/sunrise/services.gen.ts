// This file is auto-generated by @hey-api/openapi-ts

import {
    createClient,
    createConfig,
    type Options,
} from "@hey-api/client-fetch";
import type {
    GetMoonData,
    GetMoonError,
    GetMoonResponse,
    GetSunData,
    GetSunError,
    GetSunResponse,
    GetChangelogError,
    GetChangelogResponse,
    GetHealthzError,
    GetHealthzResponse,
    GetValuesData,
    GetValuesError,
    GetValuesResponse,
} from "./types.gen";

export const client = createClient(createConfig());

export class DataService {
    /**
     * Calculate sun or moon events, as seen from a specific location on Earth
     */
    public static getMoon<ThrowOnError extends boolean = false>(
        options: Options<GetMoonData, ThrowOnError>,
    ) {
        return (options?.client ?? client).get<
            GetMoonResponse,
            GetMoonError,
            ThrowOnError
        >({
            ...options,
            url: "/moon",
        });
    }

    /**
     * Calculate sun or moon events, as seen from a specific location on Earth
     */
    public static getSun<ThrowOnError extends boolean = false>(
        options: Options<GetSunData, ThrowOnError>,
    ) {
        return (options?.client ?? client).get<
            GetSunResponse,
            GetSunError,
            ThrowOnError
        >({
            ...options,
            url: "/sun",
        });
    }
}

export class MetadataService {
    /**
     * RSS feed of changes to this product
     */
    public static getChangelog<ThrowOnError extends boolean = false>(
        options?: Options<unknown, ThrowOnError>,
    ) {
        return (options?.client ?? client).get<
            GetChangelogResponse,
            GetChangelogError,
            ThrowOnError
        >({
            ...options,
            url: "/changelog",
        });
    }

    /**
     * Check health status for product
     */
    public static getHealthz<ThrowOnError extends boolean = false>(
        options?: Options<unknown, ThrowOnError>,
    ) {
        return (options?.client ?? client).get<
            GetHealthzResponse,
            GetHealthzError,
            ThrowOnError
        >({
            ...options,
            url: "/healthz",
        });
    }

    /**
     * List allowed options for parameters
     */
    public static getValues<ThrowOnError extends boolean = false>(
        options?: Options<GetValuesData, ThrowOnError>,
    ) {
        return (options?.client ?? client).get<
            GetValuesResponse,
            GetValuesError,
            ThrowOnError
        >({
            ...options,
            url: "/values",
        });
    }
}
